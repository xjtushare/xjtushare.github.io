<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-25T04:55:39.857Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Pu Cao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>14 longest-common-prefix</title>
    <link href="http://example.com/2021/03/25/14_longest-common-prefix/"/>
    <id>http://example.com/2021/03/25/14_longest-common-prefix/</id>
    <published>2021-03-25T02:30:28.000Z</published>
    <updated>2021-03-25T04:55:39.857Z</updated>
    
    <content type="html"><![CDATA[<p>** Clarification(means Possible situation)：**<br>     *      1、 String arr null or empty?<br>     *      2、 String null or empty?<br>     *      3、 lower-case Englist letters? 如果有Upper-case，是否需要ignore case<br>     *<br>     * Solution 1:<br>     *  Horizontal Scan （水平比较）<br>     *      arr for loop 每两个字符串相比较，直到比较到最后一个字符串，就找到了共同前缀</p><p><img src="/2021/03/25/14_longest-common-prefix/16163813815934.jpg" alt="-w899"></p><p>不足：前面对owe的比较都是多余的，因为后面的单词中没有的，最终都被删除了。</p><p> <strong>Solution 1: vertically Scan (竖直扫描)</strong></p><p>   每个单词的第一个字符 f；<br>   每个单词的第二个字符 l；<br>   每个单词的第三个字符 0，i；<br>   =》共同前缀，fl</p><p>   <img src="/2021/03/25/14_longest-common-prefix/16163818004512.jpg" alt="-w887"></p><p><strong>key Points of Vertical Scan</strong></p><p><img src="/2021/03/25/14_longest-common-prefix/16163837594595.jpg" alt="-w881"></p><p>**1、拿到第一个字符串的第一个字符和后面的字符串比较<br>**    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char c &#x3D; str[0].charAt(i);</span><br></pre></td></tr></table></figure><p><strong>2、Boundary check 数组越界检查</strong><br>如果i已经达到了当前这个string的长度，就说明可以停止继续scan了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(i&#x3D;&#x3D;str[j].length())&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>3.stop position is not part of the prefix</strong></p><p>**4、substring(start,end) **<br>是不包含end位置(end is excluded in the substring)，所以可以用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Strs[0].substring(0,i);</span><br></pre></td></tr></table></figure><p><strong>5、Finish Scan</strong><br>    已经走完的即 最长的共同前缀</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">return strs[0]</span><br><span class="line">&#96;&#96;&#96;    </span><br><span class="line"></span><br><span class="line">**solution**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java&#x2F;Solution.java</span><br><span class="line">&#x2F;*</span><br><span class="line"> * 示例 1：</span><br><span class="line"> *</span><br><span class="line"> * 输入：strs &#x3D; [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line"> * 输出：&quot;fl&quot;</span><br><span class="line"> *</span><br><span class="line"> * 示例 2：</span><br><span class="line"> * 输入：strs &#x3D; [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line"> * 输出：&quot;&quot;</span><br><span class="line"> * 解释：输入不存在公共前缀。</span><br><span class="line"></span><br><span class="line"> * 提示：</span><br><span class="line"> * strs[i] 仅由小写英文字母组成</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; @lc code&#x3D;start</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public String longestCommonPrefix(String[] strs) &#123;</span><br><span class="line">        if(strs &#x3D;&#x3D; null || strs.length &#x3D;&#x3D; 0) return &quot;&quot;;</span><br><span class="line">        for(int i &#x3D; 0; i &lt; strs[0].length(); i++) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取第一个字符串每一个位置上的字符 c</span><br><span class="line">            char c &#x3D; strs[0].charAt(i);</span><br><span class="line">            &#x2F;&#x2F; j从1开始，拿第一个字符串和之后的字符串进行比较</span><br><span class="line">            for(int j &#x3D; 1; j &lt; strs.length; j++) &#123;</span><br><span class="line">        &#x2F;&#x2F; 判断之后的每一个字符串(strs[j])的第i位置上的字符串是否等于第一个字符串每一个位置上的字符 c （判断之前，一定要判断是否i已经是当前这个字符串的长度）</span><br><span class="line">                if(i &#x3D;&#x3D; strs[j].length() || strs[j].charAt(i)!&#x3D; c) &#123;</span><br><span class="line">                    return strs[0].substring(0,i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;如果顺利走完了第一字符串的每一个位置，那么最长前缀就是第一个字符串</span><br><span class="line">        return strs[0];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; @lc code&#x3D;end</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;** Clarification(means Possible situation)：**&lt;br&gt;     *      1、 String arr null or empty?&lt;br&gt;     *      2、 String null or empty?&lt;br&gt;    </summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>200 numIslands</title>
    <link href="http://example.com/2021/03/24/200_numIslands/"/>
    <id>http://example.com/2021/03/24/200_numIslands/</id>
    <published>2021-03-24T10:30:28.000Z</published>
    <updated>2021-03-24T11:15:39.552Z</updated>
    
    <content type="html"><![CDATA[<p><strong>考点：深度搜索DFS</strong><br>  DFS：从一个点开始往下走，走到尽可能远，远到不能走下去的时候才返回上一级<br>一般用Recursion迭代，其中最关键的就是终止条件，</p><blockquote><p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p></blockquote><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：grid &#x3D; [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]</span><br><span class="line">]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p> <strong>解析</strong>：<br><img src="/2021/03/24/200_numIslands/p1.png"></p><p><strong>point 1</strong><br>每次都是遇到‘1‘之后，开始DFS算法，也就是向四个方向延伸，直到不能继续延伸，就找到了一个岛</p><p><strong>point 2</strong><br>那么如何才能再二维数组中找到‘1’的点呢？  –》 two for loop<br>DFS，一般使用迭代，终止条件：<br>    1、走到不是1的时候停止<br>    2、走到了数组的边界就停止</p><p><strong>point 3</strong><br>  如何避免重复？<br>        1、避免重复遍历已经遍历过的元素，比如1；  –》标记法来避免（遍历过就把1标记为#）<br>        2、避免重复遍历已经遍历过的岛</p><p><img src="/2021/03/24/200_numIslands/p2.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; @lc code&#x3D;start</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int numIslands(char[][] arr) &#123;</span><br><span class="line">        int res &#x3D; 0;</span><br><span class="line">        &#x2F;&#x2F; row</span><br><span class="line">        for(int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        &#x2F;&#x2F;    col</span><br><span class="line">            for(int j &#x3D; 0; j&lt; arr[0].length; j++) &#123;</span><br><span class="line">                &#x2F;&#x2F; 如果当前元素arr[i][j]&#x3D;&#x3D;“1”，就进行DFS深搜</span><br><span class="line">                if(arr[i][j] &#x3D;&#x3D; &#39;1&#39;) &#123;</span><br><span class="line">                    dfs(arr, i, j);</span><br><span class="line">                    &#x2F;&#x2F;dfs深搜完之后，就说明产生了一个岛，res++，记录岛的num</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 深搜DFS</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void dfs(char[][] arr, int i, int j) &#123;</span><br><span class="line">        &#x2F;&#x2F;corner case  | arr[i][j] !&#x3D;&#39;1&#39; </span><br><span class="line">        if(i &lt; 0 || i &gt;&#x3D; arr.length || j &lt; 0 || j &gt;&#x3D; arr[0].length || arr[i][j] !&#x3D; &#39;1&#39;) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 当前点标记为#</span><br><span class="line">        arr[i][j] &#x3D; &#39;#&#39;;</span><br><span class="line">        &#x2F;&#x2F;上下左右进行DFS</span><br><span class="line">        dfs(arr, i+1, j);</span><br><span class="line">        dfs(arr, i-1, j);</span><br><span class="line">        dfs(arr, i, j+1);</span><br><span class="line">        dfs(arr, i, j-1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; @lc code&#x3D;end</span><br><span class="line"></span><br><span class="line">****</span><br></pre></td></tr></table></figure><p><img src="/2021/03/24/200_numIslands/p3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;考点：深度搜索DFS&lt;/strong&gt;&lt;br&gt;  DFS：从一个点开始往下走，走到尽可能远，远到不能走下去的时候才返回上一级&lt;br&gt;一般用Recursion迭代，其中最关键的就是终止条件，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个由 ‘1’（陆地）和</summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>hello</title>
    <link href="http://example.com/2021/03/24/hello/"/>
    <id>http://example.com/2021/03/24/hello/</id>
    <published>2021-03-24T04:46:31.000Z</published>
    <updated>2021-03-24T08:13:26.375Z</updated>
    
    <content type="html"><![CDATA[<p>day after day</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;day after day&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="time" scheme="http://example.com/tags/time/"/>
    
  </entry>
  
</feed>
